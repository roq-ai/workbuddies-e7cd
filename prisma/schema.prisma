generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model application {
  id                String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status            String         @db.VarChar(255)
  worker_profile_id String         @db.Uuid
  job_posting_id    String         @db.Uuid
  created_at        DateTime       @default(now()) @db.Timestamp(6)
  updated_at        DateTime       @default(now()) @db.Timestamp(6)
  job_posting       job_posting    @relation(fields: [job_posting_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  worker_profile    worker_profile @relation(fields: [worker_profile_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job_posting {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String        @db.VarChar(255)
  description     String        @db.VarChar(255)
  location        String        @db.VarChar(255)
  start_date      DateTime      @db.Date
  end_date        DateTime      @db.Date
  organization_id String        @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  application     application[]
  organization    organization  @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  image       String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  job_posting job_posting[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  organization   organization[]
  worker_profile worker_profile[]
}

model worker_profile {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  skills       String        @db.VarChar(255)
  experience   String        @db.VarChar(255)
  availability DateTime      @db.Date
  user_id      String        @db.Uuid
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  application  application[]
  user         user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
